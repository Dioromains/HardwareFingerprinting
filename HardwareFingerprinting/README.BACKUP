# Hardware Fingerprinting Library

A C# library for generating unique hardware fingerprints based on various hardware components. This project demonstrates SOLID principles and clean code architecture.

## Overview

This library creates a unique identifier for a computer by combining multiple hardware characteristics:
- CPU information
- Machine/Host name
- MAC addresses of network interfaces
- Hard drive serial numbers

## Project Structure

The project follows SOLID principles:

- **Single Responsibility Principle (SRP)**: Each class has a single responsibility
- **Open/Closed Principle (OCP)**: The code is open for extension but closed for modification
- **Liskov Substitution Principle (LSP)**: Implementations can be substituted for their interfaces
- **Interface Segregation Principle (ISP)**: Interfaces are specific to client needs
- **Dependency Inversion Principle (DIP)**: High-level modules depend on abstractions, not concrete implementations

### Folders

- **Interfaces**: Contains all interface definitions
- **Implementations**: Contains concrete implementations of interfaces
- **Factories**: Contains factory classes for creating objects
- **Utils**: Contains utility classes

## Key Components

1. **IHardwareIdentifier**: Interface for hardware component identifiers
2. **IHardwareFingerprintService**: Interface for the hardware fingerprint service
3. **IHardwareIdentifierFactory**: Interface for the hardware identifier factory
4. **HardwareIdentifierFactory**: Factory for creating hardware identifiers
5. **HardwareFingerprintService**: Service for generating and validating hardware fingerprints
6. **Component Identifiers**: Implementations for CPU, Host, MAC, and HDD identifiers

## Usage

```csharp
// Create the factory and service
var factory = new HardwareIdentifierFactory();
var service = new HardwareFingerprintService(factory);

// Generate a hardware fingerprint
string fingerprint = service.GenerateFingerprint();

// Validate a hardware fingerprint
byte[] fingerprintBytes = Convert.FromBase64String(fingerprint);
bool isValid = service.ValidateFingerprint(fingerprintBytes);
```

## Educational Purpose

This project is designed for educational purposes and interview presentations to demonstrate:

1. SOLID principles in action
2. Clean code architecture
3. Dependency injection
4. Factory pattern
5. Interface-based programming
6. Unit testing support

## Security Considerations

- The code includes measures to detect virtualization
- Uses cryptographic hashing for data processing
- Implements validation to ensure the hardware ID's integrity
- Filters out potentially spoofed or virtual hardware identifiers

## License

This project is available for educational purposes only. 